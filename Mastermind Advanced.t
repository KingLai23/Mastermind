%Font settings
var title : int := Font.New ("sans serif:64:bold")
var gameStart : int := Font.New ("sans serif:40:bold")
var countdown : int := Font.New ("sans serif:44:bold")
var mastermind : int := Font.New ("sans serif:40:bold")
var name : int := Font.New ("sans serif:18:bold")
var options : int := Font.New ("san serif:20:bold")
var outcome : int := Font.New ("sans serif:32:bold")
var results : int := Font.New ("sans serif:24:bold")
var againQuit : int := Font.New ("sans serif:18")

var countdownNum : string

%User inputs
var rulesPlay, any, playAgain : string (1)

%Checking for two-player
var twoPlayer : boolean

%Guesses from the user, the actual code, and intstr variables
var guess1, guess2, guess3, guess4 : int
var code1, code2, code3, code4 : int
var code1Str, code2Str, code3Str, code4Str : string

%Booleans to whether or not the code or guess was used
var guess1Taken, guess2Taken, guess3Taken, guess4Taken : boolean
var code1Taken, code2Taken, code3Taken, code4Taken : boolean

%Attempts counter, maximum attempts, and intstr variable
var attemptNum : int := 1
var maxAttempts : int
var attemptStr : string

%Counters for correct number + position and correct number + wrong position
var correctPos, correctNum : int

%Procedure for drawing a line to separate sections of text
procedure line
    put "_________________________________________________________________"
    put ""
end line

%Mastermind loading screen
Font.Draw ("Mastermind", 70, 225, title, black)
delay (500)
Draw.FillBox (75, 195, 230, 205, black)
delay (333)
Draw.FillBox (75, 195, 386, 205, black)
delay (333)
Draw.FillBox (75, 195, 541, 205, black)
delay (333)

%Loop from start screen to gameover screen so you can restart game w/o restarting the program
loop
    cls
    twoPlayer := false

    Font.Draw ("Mastermind", 30, 337, mastermind, black)
    Font.Draw ("M", 378, 350, mastermind, black)
    Font.Draw ("King Lai", 490, 362, name, black)
    Draw.FillBox (0, 310, 365, 305, black)
    Draw.FillBox (360, 310, 365, maxy, black)
    Draw.FillBox (360, 330, maxx, 335, black)
    Draw.FillBox (435, 330, 440, maxy, black)

    Font.Draw ("Type '1' for the rules of the game.", 100, 215, options, black)
    Font.Draw ("Type any other key to start playing!", 92, 150, options, black)

    locate (20, 40)
    getch (rulesPlay)

    %User went to the rules of the game
    if (rulesPlay = "1") then
	cls
	line
	put "Rules of the Game:"
	line
	put "A 4-digit code will be created using numbers from 1-8."
	put ""
	put "You will have 'x' attempts to guess the 4-digit code."
	put ""
	put "After each guess, you will be informed about how many numbers you"
	put "guess correctly that were in the right position, and how many"
	put "numbers you guessed correctly that weren't in the right position."
	put ""
	put "You can either play single-player or two-player."
	put ""
	put "In single-player, a code will be randomly generated by the"
	put "program. In two-player, player-one will create the code for"
	put "player-two to guess."
	put ""
	put "Good Luck!"
	line
	put "Type any key to continue..."
	getch (any)
    end if

    cls

    %Deciding which gamemode to play
    line
    put "Type '1' for single-player or any other key for two-player..."
    getch (any)

    cls

    %User chooses multiplayer, player-one sets the code
    if (any not= "1") then
	twoPlayer := true

	line
	put "You have chosen TWO-PLAYER."
	line

	%Allowing player-one to set the code
	put "Player-one, enter the first digit in the code: " ..
	%Checking if the user input is valid
	loop
	    get code1
	    exit when code1 > 0 and code1 < 9
	    put "Invalid input, try again: " ..
	end loop

	put "Player-one, enter the second digit in the code: " ..
	%Checking if the user input is valid
	loop
	    get code2
	    exit when code2 > 0 and code2 < 9
	    put "Invalid input, try again: " ..
	end loop

	put "Player-one, enter the third digit in the code: " ..
	%Checking if the user input is valid
	loop
	    get code3
	    exit when code3 > 0 and code3 < 9
	    put "Invalid input, try again: " ..
	end loop

	put "Player-one, enter the fourth digit in the code: " ..
	%Checking if the user input is valid
	loop
	    get code4
	    exit when code4 > 0 and code4 < 9
	    put "Invalid input, try again: " ..
	end loop
    else
	%User chooses single-player
	line
	put "You have chosen SINGLE-PLAYER."

	%Generating code for single-player
	randint (code1, 1, 8)
	randint (code2, 1, 8)
	randint (code3, 1, 8)
	randint (code4, 1, 8)
    end if

    %Setting the amount of guesses allowed
    line
    put "Set the number of attempts allowed (minimum of 1): " ..
    loop
	get maxAttempts
	exit when maxAttempts > 0
	put "Invalid input, try again: " ..
    end loop

    line

    %Delay is used to make transition to countdown screen easier to see
    delay (750)
    cls

    %Countdown
    for decreasing i : 3 .. 1
	countdownNum := intstr (i)
	Font.Draw ("Game starts in..", 70, 225, gameStart, black)
	Font.Draw (countdownNum, 470, 223, countdown, black)
	delay (1000)
	cls
    end for

    %Resetting the attempts counter before the attempts loop starts
    attemptNum := 1

    % put code1, " ", code2, " ", code3, " ", code4
    % put ""

    %Loop for making the attempts, ends when the user guesses the correct code or exceeds the max. attempts allowed
    loop
	%Resetting the values
	code1Taken := false
	code2Taken := false
	code3Taken := false
	code4Taken := false

	guess1Taken := false
	guess2Taken := false
	guess3Taken := false
	guess4Taken := false

	correctPos := 0
	correctNum := 0

	%User inputting his/her guesses
	line
	put "This is attempt #", attemptNum
	line

	put "Enter the first guess: " ..
	%Checking if the user guess is valid
	loop
	    get guess1
	    exit when guess1 > 0 and guess1 < 9
	    put "Invalid input, try again: " ..
	end loop

	put "Enter the second guess: " ..
	%Checking if the user guess is valid
	loop
	    get guess2
	    exit when guess2 > 0 and guess2 < 9
	    put "Invalid input, try again: " ..
	end loop

	put "Enter the third guess: " ..
	%Checking if the user guess is valid
	loop
	    get guess3
	    exit when guess3 > 0 and guess3 < 9
	    put "Invalid input, try again: " ..
	end loop

	put "Enter the fourth guess: " ..
	%Checking if the user guess is valid
	loop
	    get guess4
	    exit when guess4 > 0 and guess4 < 9
	    put "Invalid input, try again: " ..
	end loop

	%Correct number in correct position
	if (guess1 = code1) then
	    code1Taken := true
	    guess1Taken := true
	    correctPos := correctPos + 1
	end if

	if (guess2 = code2) then
	    code2Taken := true
	    guess2Taken := true
	    correctPos := correctPos + 1
	end if

	if (guess3 = code3) then
	    code3Taken := true
	    guess3Taken := true
	    correctPos := correctPos + 1
	end if

	if (guess4 = code4) then
	    code4Taken := true
	    guess4Taken := true
	    correctPos := correctPos + 1
	end if

	%Correct number in wrong position
	if (not code1Taken) then
	    if (not guess2Taken and guess2 = code1) then
		guess2Taken := true
		correctNum := correctNum + 1
	    elsif (not guess3Taken and guess3 = code1) then
		guess3Taken := true
		correctNum := correctNum + 1
	    elsif (not guess4Taken and guess4 = code1) then
		guess4Taken := true
		correctNum := correctNum + 1
	    end if
	end if

	if (not code2Taken) then
	    if (not guess1Taken and guess1 = code2) then
		guess1Taken := true
		correctNum := correctNum + 1
	    elsif (not guess3Taken and guess3 = code2) then
		guess3Taken := true
		correctNum := correctNum + 1
	    elsif (not guess4Taken and guess4 = code2) then
		guess4Taken := true
		correctNum := correctNum + 1
	    end if
	end if

	if (not code3Taken) then
	    if (not guess1Taken and guess1 = code3) then
		guess1Taken := true
		correctNum := correctNum + 1
	    elsif (not guess2Taken and guess2 = code3) then
		guess2Taken := true
		correctNum := correctNum + 1
	    elsif (not guess4Taken and guess4 = code3) then
		guess4Taken := true
		correctNum := correctNum + 1
	    end if
	end if

	if (not code4Taken) then
	    if (not guess1Taken and guess1 = code4) then
		guess1Taken := true
		correctNum := correctNum + 1
	    elsif (not guess2Taken and guess2 = code4) then
		guess2Taken := true
		correctNum := correctNum + 1
	    elsif (not guess3Taken and guess3 = code4) then
		guess3Taken := true
		correctNum := correctNum + 1
	    end if
	end if

	put ""
	put "The number of correct numbers in the correct position is: ", correctPos
	put "The number of correct numbers in the wrong position is: ", correctNum

	exit when attemptNum = maxAttempts or guess1 = code1 and guess2 = code2 and guess3 = code3 and guess4 = code4

	%The loop did not exit, therefore, the amount of attempts the player has used increases by 1
	attemptNum := attemptNum + 1
	put ""
    end loop

    line

    %Delay is used to make transition to outcome screens easier to see
    delay (750)

    cls

    %Converting the integer values to a string for the graphics output
    attemptStr := intstr (attemptNum)
    code1Str := intstr (code1)
    code2Str := intstr (code2)
    code3Str := intstr (code3)
    code4Str := intstr (code4)

    if (guess1 = code1 and guess2 = code2 and guess3 = code3 and guess4 = code4) then
	if (twoPlayer = true) then
	    Font.Draw ("PLAYER-TWO WINS!!", 100, 270, outcome, black)
	    if (attemptNum = 1) then
		delay (750)
		Font.Draw ("Cracking the code on the FIRST attempt!", 13, 215, results, black)
	    elsif (attemptNum < 10) then
		delay (750)
		Font.Draw ("Cracking the code in", 65, 215, results, black)
		Font.Draw (attemptStr, 392, 214, results, black)
		Font.Draw ("attempts!", 418, 214, results, black)
	    else
		delay (750)
		Font.Draw ("Cracking the code in", 65, 215, results, black)
		Font.Draw (attemptStr, 392, 214, results, black)
		Font.Draw ("attempts!", 439, 214, results, black)
	    end if
	else
	    Font.Draw ("YOU WIN!!", 200, 270, outcome, black)
	    if (attemptNum = 1) then
		delay (750)
		Font.Draw ("You've cracked the code in ONE attempt!", 18, 215, results, black)
	    elsif (attemptNum < 10) then
		delay (750)
		Font.Draw ("You've cracked the code in", 20, 215, results, black)
		Font.Draw (attemptStr, 442, 214, results, black)
		Font.Draw ("attempts!", 472, 214, results, black)
	    else
		delay (750)
		Font.Draw ("You've cracked the code in", 20, 215, results, black)
		Font.Draw (attemptStr, 442, 214, results, black)
		Font.Draw ("attempts!", 493, 214, results, black)
	    end if
	end if
    else
	if (twoPlayer = true) then
	    Font.Draw ("PLAYER-ONE WINS!!", 100, 270, outcome, black)
	else
	    Font.Draw ("You ran outta attempts...", 75, 270, outcome, black)
	end if
	delay (750)
	Font.Draw ("The correct code was:", 95, 215, results, black)
	delay (400)
	Font.Draw (code1Str, 450, 214, results, black)
	delay (400)
	Font.Draw (code2Str, 475, 214, results, black)
	delay (400)
	Font.Draw (code3Str, 500, 214, results, black)
	delay (400)
	Font.Draw (code4Str, 525, 214, results, black)
    end if

    %Asking user to play again
    delay (750)
    Font.Draw ("Type '1' to play again or any other key to quit.", 80, 155, againQuit, black)
    locate (18, 40)
    getch (playAgain)

    %Checking if the user wanted to quit the game
    %Code inside if-structure is the godbye screen
    if (playAgain not= "1") then
	cls
	Font.Draw ("Good", 125, 225, title, black)
	delay (500)
	Font.Draw ("bye.", 346, 225, title, black)

	delay (500)
	colourback (black)
	cls

	Font.Draw ("Goodbye.", 125, 225, title, white)
	Draw.FillBox (130, 195, 516, 205, white)

	delay (333)
	colourback (black)
	cls
    end if

    %Checking if the user requested to quit the game
    exit when playAgain not= "1"
end loop
